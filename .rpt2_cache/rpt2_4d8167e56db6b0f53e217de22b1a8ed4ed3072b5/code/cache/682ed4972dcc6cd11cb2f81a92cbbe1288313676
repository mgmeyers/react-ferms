{"code":"export var FormStatus;\r\n(function (FormStatus) {\r\n    FormStatus[FormStatus[\"PRISTINE\"] = 0] = \"PRISTINE\";\r\n    FormStatus[FormStatus[\"DIRTY\"] = 1] = \"DIRTY\";\r\n    FormStatus[FormStatus[\"INVALID\"] = 2] = \"INVALID\";\r\n})(FormStatus || (FormStatus = {}));\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/index.tsx\"],\"names\":[],\"mappings\":\"AAsHA,MAAM,CAAN,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,mDAAQ,CAAA;IACR,6CAAK,CAAA;IACL,iDAAO,CAAA;AACT,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB\"}","dts":{"name":"/Users/matt/Documents/Personal/react-ferms/types/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport FormField from 'data/FormField';\r\nimport FormFields from 'data/FormFields';\r\nexport interface FormProps {\r\n    /**\r\n     * Default form values in the form of key/value pairs where the key is a form\r\n     * field name, and the value is the form field value. Values in nested objects\r\n     * can be accessed through dot notation.\r\n     *\r\n     * @example\r\n     * <Form\r\n     *   defaults={{ title: 'hello', name: { first: 'John', last: 'Doe'  } }}\r\n     *   onSubmit={values => console.log(values)}\r\n     * >\r\n     *   <Input name=\"title\" type=\"text\" />\r\n     *   <Input name=\"name.first\" type=\"text\" />\r\n     *   <Input name=\"name.last\" type=\"text\" />\r\n     *\r\n     *   <button type=\"submit\">Submit</button>\r\n     * </Form>\r\n     */\r\n    defaults?: MapStringAny;\r\n    children?: React.ReactNode;\r\n    /**\r\n     * The default setting describing when to trigger field validation. This can\r\n     * be overridden on a per-field basis\r\n     */\r\n    validateOn?: ValidateOnOpts;\r\n    /**\r\n     * Applies a field validation to a field value. This can be\r\n     * used to support various third party validation libraries.\r\n     *\r\n     * A validation strategy has the signature:\r\n     * ```\r\n     * (value: any, validation: any) => true | Array<string | Error | JSX.Element>\r\n     * ```\r\n     */\r\n    validationStrategy?: ValidationStrategy;\r\n    /**\r\n     * Executed when the form is submitted. onSubmit gets passed an object mapping\r\n     * field names to transformed field values\r\n     */\r\n    onSubmit(values: MapStringAny): void;\r\n    /**\r\n     * Executed before a form's onSubmit validation occurs.\r\n     */\r\n    preValidate?(): void;\r\n    /**\r\n     * Executed when a form's onSubmit validation fails\r\n     */\r\n    onError?(errors: {\r\n        [key: string]: ValidationResults;\r\n    }): void;\r\n}\r\nexport interface FormFieldProps {\r\n    /**\r\n     * The key associated with a form field's value. Supports nested objects through\r\n     * dot notation.\r\n     */\r\n    name: string;\r\n    multiple?: boolean;\r\n    /**\r\n     * A Function used to transform a fields raw text value.\r\n     * `(value: any) => any`\r\n     */\r\n    transform?: TransformFn;\r\n    type?: string;\r\n    /**\r\n     * A function used to validate a field's value. The function signature when\r\n     * using the default validation strategy is\r\n     * `(value: any) => true | Array<string | Error | JSX.Element>`\r\n     */\r\n    validate?: any;\r\n    /**\r\n     * Override the form's default `validateOn`. Available options are:\r\n     * `submit | blur | change`\r\n     */\r\n    validateOn?: ValidateOnOpts;\r\n}\r\nexport interface IFormContext {\r\n    add: (field: AddFieldOpts) => void;\r\n    fields: FormFields;\r\n    remove: (key: string) => void;\r\n    setTransform: (key: string, transform: TransformFn) => void;\r\n    setValidateOn: (key: string, validateOn: ValidateOnOpts) => void;\r\n    setValidation: (key: string, validate: any) => void;\r\n    setValue: (key: string, value: string | string[]) => void;\r\n    validateField: (key: string) => void;\r\n}\r\nexport interface MapStringAny {\r\n    [key: string]: any;\r\n}\r\nexport interface MapStringFormField {\r\n    [key: string]: FormField;\r\n}\r\nexport declare type TransformFn = (value: any) => any;\r\nexport declare type ValidateOnOpts = 'change' | 'blur' | 'submit';\r\nexport declare type ValidationResults = true | Array<string | Error | JSX.Element>;\r\nexport declare type ValidationStrategy = (value: any, validation: any) => ValidationResults;\r\nexport declare enum FormStatus {\r\n    PRISTINE = 0,\r\n    DIRTY = 1,\r\n    INVALID = 2\r\n}\r\nexport interface FormFieldJSON {\r\n    defaultValidateOn: ValidateOnOpts;\r\n    key: string;\r\n    validationStrategy: ValidationStrategy;\r\n    errors?: Array<string | JSX.Element>;\r\n    multiple?: boolean;\r\n    status?: FormStatus;\r\n    transform?: TransformFn;\r\n    validate?: any;\r\n    validateOn?: ValidateOnOpts;\r\n    value?: string | string[];\r\n}\r\nexport interface FormFieldValidation {\r\n    field: FormField;\r\n    valid: boolean;\r\n}\r\nexport interface FormFieldsValidation {\r\n    fields: FormFields;\r\n    valid: boolean;\r\n}\r\nexport interface AddFieldOpts {\r\n    key: string;\r\n    multiple?: boolean;\r\n    transform?: TransformFn;\r\n    validate?: any;\r\n    validateOn?: ValidateOnOpts;\r\n    value?: string;\r\n}\r\nexport interface FormFieldsOptions {\r\n    defaults?: MapStringAny;\r\n    fields?: MapStringFormField;\r\n    validateOn?: ValidateOnOpts;\r\n    validationStrategy?: ValidationStrategy;\r\n}\r\nexport declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n"}}
